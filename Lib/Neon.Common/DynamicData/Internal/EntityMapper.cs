//-----------------------------------------------------------------------------
// FILE:	    EntityMapper.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:	Copyright (c) 2016-2019 by neonFORGE, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

using Neon.Common;
using Neon.DynamicData;

namespace Neon.DynamicData.Internal
{
    /// <summary>
    /// <b>Platform use only:</b> Used by <see cref="IDynamicEntity"/> implementations to 
    /// map a property to a nested <see cref="IDynamicEntity"/> instance.
    /// </summary>
    /// <typeparam name="TEntity">The property value type.</typeparam>
    /// <remarks>
    /// <note>
    /// This class is intended for use only by classes generated by the
    /// <b>entity-gen</b> build tool.
    /// </note>
    /// </remarks>
    /// <threadsafety instance="false"/>
    public struct EntityMapper<TEntity> : IPropertyMapper
        where TEntity : class, IDynamicEntity, new()
    {
        private IDynamicEntity             parentEntity;
        private IDynamicEntityContext      context;
        private JProperty           property;
        private IDynamicEntity             entityValue;

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="parentEntity">The <see cref="IDynamicEntity"/> that owns this mapper.</param>
        /// <param name="jsonName">The JSON property name.</param>
        /// <param name="propertyName">The entity property name.</param>
        /// <param name="context">The <see cref="IDynamicEntityContext"/> or <c>null</c>.</param>
        public EntityMapper(IDynamicEntity parentEntity, string jsonName, string propertyName, IDynamicEntityContext context)
        {
            Covenant.Requires<ArgumentNullException>(parentEntity != null);
            Covenant.Requires<ArgumentNullException>(!string.IsNullOrEmpty(jsonName));
            Covenant.Requires<ArgumentNullException>(!string.IsNullOrEmpty(propertyName));

            this.parentEntity = parentEntity;
            this.context      = context;
            this.JsonName     = jsonName;
            this.PropertyName = propertyName;
            this.property     = null;
            this.entityValue  = null;
        }

        /// <inheritdoc/>
        public string JsonName { get; private set; }

        /// <inheritdoc/>
        public string PropertyName { get; private set; }

        /// <summary>
        /// The current property value.
        /// </summary>
        public TEntity Value
        {
            get { return (TEntity)entityValue; }

            set
            {
                // We need to do some extra work for entity properties:
                //
                //    * If the current and new instances are the same then do nothing.
                //
                //    * Detach the current instance (if there is one) from its
                //      entity parent to stop property change event bubbling.
                //
                //    * For non-NULL new entities, attach it to the parent
                //      and then set the property value to the entity's
                //      dynamic JObject.
                //
                //    * Then set the property value.

                var newEntity = value as IDynamicEntity;

                entityValue?._Detach();
                newEntity?._Attach(parentEntity);

                property.Value = newEntity?.JObject;
                entityValue    = newEntity;
            }
        }

        /// <inheritdoc/>
        public bool Load(JProperty newProperty, bool reload = false)
        {
            Covenant.Requires<ArgumentNullException>(newProperty != null);

            var changed = !NeonHelper.JTokenEquals(property, newProperty);

            property = newProperty;

            if (newProperty.Value == null || newProperty.Value.Type == JTokenType.Null)
            {
                entityValue = null;
            }
            else if (newProperty.Value.Type == JTokenType.Object)
            {
                entityValue = DynamicEntity.Create<TEntity>(newProperty.Value as JObject, context);
                entityValue._Attach(parentEntity);
            }
            else
            {
                throw new InvalidCastException($"Unable to cast a [{newProperty.Type}] into a [{typeof(TEntity).FullName}].");
            }

            if (reload && changed)
            {
                parentEntity._OnPropertyChanged(PropertyName);
            }

            return changed;
        }
    }
}
