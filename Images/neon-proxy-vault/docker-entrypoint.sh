#!/bin/sh
#------------------------------------------------------------------------------
# FILE:         docker-entrypoint.sh
# CONTRIBUTOR:  Jeff Lill
# COPYRIGHT:    Copyright (c) 2016-2018 by neonFORGE, LLC.  All rights reserved.
#
# Loads the Docker host node environment variables before launching HAProxy.

# Add the root directory to the PATH.

PATH=${PATH}:/

# Load the hive host node environment.

if [ ! -f /etc/neon/host-env ] ; then
    . log-critical.sh "The [/etc/neon/host-env] file does not exist.  This file must be present on the hive host be mounted to the container."
    exit 1
fi

. /etc/neon/host-env

# Log startup information.

. log-info.sh "Starting [neon-proxy-vault]"
. log-info.sh "VAULT_ENDPOINTS=${VAULT_ENDPOINTS}"
. log-info.sh "LOG_LEVEL=${LOG_LEVEL}"

# Load the neonHIVE definitions.

. /neonhive.sh

# Generate the static part of the HAProxy configuration file.  The config is
# pretty simple, some global defaults, the frontend definition followed by the
# backend which defines a server for each NAME:ADDRESS:PORT passed in VAULT_ENDPOINTS.
#
# Note that the [neon-log-collector] depends on the format of the proxy frontend
# and backend names, so don't change these.
#
# NOTE: We're using an external health check script rather than using the
#       HAProxy integrated check because we're proxying TCP rather than 
#       HTTPS because the certificate/security is handled by Vault.

mkdir -p /etc/haproxy
configPath=/etc/haproxy/haproxy.cfg

cat <<EOF > ${configPath}
#------------------------------------------------------------------------------
# FILE:         /etc/haproxy/haproxy.cfg
# CONTRIBUTOR:  Generated by the image [/docker-entrypoint.sh] script.

global

    # Maximum number of connections.  1K should be more than enough for
    # anything besides truly gigantic hives.

    maxconn             1000

    # Randomize health check timing.

    spread-checks       5

    # Enable logging to syslog on the local Docker host under the
    # HiveSysLogFacility_VaultLB facility.

    log                 ${NEON_NODE_IP}:${HiveHostPorts_LogHostSysLog} len 65535 ${HiveSysLogFacility_ProxyName}

    # Disable TLS certificate verification for backend health checks.
    # We could have used:
    #
    #       default-server ca-file /etc/ssl/certs/ca-certificates.crt
    #
    # to tell HAProxy about the known certificates but I think I'd rather
    # allow the clients to report any certificate problems to simplify
    # future debugging.

    ssl-server-verify   none

defaults

    # Proxy inbound traffic as TCP so we can balance both HTTP and HTTPS
    # traffic without needing the TLS certificate.

    mode                tcp

    # Apply global log settings to services.

    log                 global

    # Log TCP connection details.

    option              tcplog

    # Timeouts are relatively brief because Vault is hive local and should be fast.

    timeout             connect 5s
    timeout             client 10s
    timeout             server 10s

    # Load balancing strategy.

    balance             roundrobin

    # Retry failed connections a couple of times (for a total of three attempts).

    retries             2

    # Amount of time after which a health check is considered to have timed out.

    timeout check       5s

# Proxy definitions.
#
# Note that [log-format] must be consistent with the standard format implemented
# by [HiveHelper.GetProxyLogFormat()].

frontend tcp:vault-static
    bind                *:${NetworkPorts_Vault}
    unique-id-header    X-Request-ID
    unique-id-format    ${HiveConst_HAProxyUidFormat}
    log                 global
    log-format          "traffic�tcp-v1�neon-proxy-vault�%t�%ci�%b�%s�%si�%sp�%sslv�%sslc�%U�%B�%Tw�%Tc�%Tt�%ts�%ac�%fc�%bc�%sc�%rc�%sq�%bq"
    option              dontlognull
    default_backend     tcp:vault-static

# Note that the [/v1/sys/health] endpoint returns a 200 status code
# when a Vault backend is the active leader and 429 when its not
# the leader.  I suppose that other 4xx/5xx status codes may be
# returned when Vault is having problems.
#
# We're simply going to send all traffic to the Vault leader that
# returns the 200.

backend tcp:vault-static
    option              httpchk HEAD /v1/sys/health
    log                 global
    option              log-health-checks
EOF

# Process VAULT_ENDPOINTS by appending a server entry for each endpoint.
# Each entry written will look like:
#
#   server HOSTNAME ADDRESS:PORT

endpoints=$(echo ${VAULT_ENDPOINTS} | tr "," "\n")

for endpoint in ${endpoints}
do
    name=$(echo ${endpoint} | cut -d':' -f 1)
    address=$(echo ${endpoint} | cut -d':' -f 2)
    port=$(echo ${endpoint} | cut -d':' -f 3)

    echo "    server              ${name}.${HiveHostnames_Vault} ${address}:${port} init-addr last,libc,none check check-ssl" >> ${configPath}
done

# Validate the configuration file and then launch HAProxy.

. log-info.sh "Verifying configuration."

if ! haproxy -c -q -f ${configPath} ; then
    . log-critical.sh "Invalid HAProxy configuration."
    exit 1
fi

# Launch HAProxy..

. log-info.sh "Starting HAProxy."

haproxy -f ${configPath}
