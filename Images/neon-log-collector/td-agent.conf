#------------------------------------------------------------------------------
# Configures the [neon-log-collector] service containers.  This service receives
# log events from the hive nodes via [neon-log-host] and then:
#
#       * Normalizes the event records
#       * Persists them to the [neon-log-esdata] Elasticsearch cluster
#
# [neon-log-host] responsibilities
# -------------------------------------
# This runs as a Docker local container on every Docker node.  It is 
# responsible for:
#
#       1. Reading events from the systemd journal.
#       2. Receiving events from local daemons and containers
#          via syslog and tagging these with [syslog].
#       3. Receiving events from local Docker containers that
#          use the [fluentd] log driver.
#       4. Adding datacenter and node metadata to each event.
#       5. Forwarding the events to the [neon-log-collector]
#          service for filtering, normalization and persistance.
#
# [neon-log-collector] responsibilities
# -------------------------------------
# This runs as a Docker service and where most, if not all, custom
# event processing will take place.  The idea is that the [neon-log-host]
# containers are responsible for capturing events and adding a bit of 
# source and datacenter/node metadata.
#
# Then the [neon-log-collector] service handles most of the dirty work, 
# filtering, parsing, normalization, and persistence and/or forwarding 
# events for further downstream processing.  The idea behind centralizing 
# this is to make it relatively easy to customize hive log processing.

#------------------------------------------------------------------------------
# Receive forwarded events.

<source>    
    @type   forward
    bind    0.0.0.0
    port    24224
</source>

# We need to avoid capturing logs from Fluentd/TD-Agent itself to avoid 
# cascading events when there's a problem with the log pipeline.  Operators
# will need to examine the source logs to diagnose these problems.

<match fluent.**>
    @type   null
</match>

#------------------------------------------------------------------------------
# Handle neonHIVE Proxy events.

# NOTE: I'm hardcoding the [local7] facility here which maps to the 
#       [NeonSysLogFacility.ProxyName] constant definition.  If that
#       definition changes, you'll need to change this too.

<filter syslog.local7.**>
    @type   neon-proxy
</filter>

<filter syslog.local7.**>
    @type   neon-proxy-geoip
</filter>

#------------------------------------------------------------------------------
# Handle events from Docker containers.

<filter **>
    @type   neon-docker
</filter>

#------------------------------------------------------------------------------
# Handle events from services hosted by systemd.

<filter systemd.**>
    @type   neon-systemd
</filter>

#------------------------------------------------------------------------------
# Persist remaining events to the Elasticsearch hive under the Logstash index
# after stripping out any non-whitelisted fields.
#
# Documentation: https://github.com/uken/fluent-plugin-elasticsearch

<filter **>
    @type               record_modifier
    whitelist_keys      @timestamp,cluster,index,cid,cid_full,datacenter,environment,level,message,module,node,node_role,service,service_host,service_type,tag,proxy,location,audit,json
</filter>

<match **>
    @type               elasticsearch
    host                "#{ENV['HiveHostnames_LogEsData']}"
    port                "#{ENV['HiveHostPorts_ProxyPrivateHttpLogEsData']}"

    logstash_format     true
    type_name           default
    include_tag_key     true
    tag_key             tag
    templates           {"logstash":"/etc/td-agent/template/logstash-template.json"}
    resurrect_after     10s
    time_key_format     %Y-%m-%dT%H:%M:%S.%L%z
    request_timeout     5s
    reload_connections  false
    reload_on_failure   false
    resurrect_after     5s

    <buffer>
        @type               memory
        chunk_limit_size    8mb     # Maximum bytes for each buffered chuck
        total_limit_size    64mb    # Maximum bytes for all buffered chunks
        compress            text    # "text" means no compression, "gzip" to compress
        flush_at_shutdown   true
        flush_mode          interval
        flush_interval      1s
        flush_thread_count  2
        overflow_action     drop_oldest_chunk
        retry_type          exponential_backoff
        retry_wait          1s
        retry_max_interval  15s
    </buffer>

</match>
