//-----------------------------------------------------------------------------
// FILE: Couchbase.Lite.g.cs
//
// This file was generated by the Neon [entity-gen] build tool.
// Any manual edits will be lost when the file is regenerated.

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;

using Newtonsoft.Json.Linq;

using Couchbase.Lite;

using Neon.Common;
using Neon.DynamicData;
using Neon.DynamicData.Internal;

//-----------------------------------------------------------------------------

#region Entities

namespace Test.Neon.Models
{
    public partial class Candy : Test.Neon.Models.Product
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "product.candy";
        private const string typePathString = "product.candy:product";

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "Calories", "Calories" },
            };

        public static new EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(Candy), "product.candy",
                (jObject, context) =>
                {
                    return new Candy(jObject, context);
                });
        }

        public static bool operator ==(Candy entity1, Candy entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(Candy entity1, Candy entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<int> _Calories;

        public Candy()
            : this(new JObject())
        {
        }

        public Candy(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(jObject, context: context, load: false, derivedPropertyNameMap: derivedPropertyNameMap)
        {
            _Calories = new SimpleMapper<int>(this, "Calories", "Calories", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override Test.Neon.Models.ProductTypes ProductType
        {
            get { return Test.Neon.Models.ProductTypes.Candy; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            changed = base._Load(jObject, reload, setType: false);
            changed = base.MapProperty<int>(ref _Calories, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            if (!base.Equals(obj))
            {
                return false;
            }

            var other = (Test.Neon.Models.Candy)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Calories != other.Calories)
            {
                return false;
            }

            return true;
        }

        public int Calories
        {
            get { return _Calories.Value; }
            set { _Calories.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class CandyBar : Test.Neon.Models.Candy
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "product.candy.bar";
        private const string typePathString = "product.candy.bar:product.candy:product";

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "HasNuts", "HasNuts" },
            };

        public static new EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(CandyBar), "product.candy.bar",
                (jObject, context) =>
                {
                    return new CandyBar(jObject, context);
                });
        }

        public static bool operator ==(CandyBar entity1, CandyBar entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(CandyBar entity1, CandyBar entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<bool> _HasNuts;

        public CandyBar()
            : this(new JObject())
        {
        }

        public CandyBar(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(jObject, context: context, load: false, derivedPropertyNameMap: derivedPropertyNameMap)
        {
            _HasNuts = new SimpleMapper<bool>(this, "HasNuts", "HasNuts", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override Test.Neon.Models.ProductTypes ProductType
        {
            get { return Test.Neon.Models.ProductTypes.CandyBar; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            changed = base._Load(jObject, reload, setType: false);
            changed = base.MapProperty<bool>(ref _HasNuts, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            if (!base.Equals(obj))
            {
                return false;
            }

            var other = (Test.Neon.Models.CandyBar)obj;

            if (other == null)
            {
                return false;
            }

            if (this.HasNuts != other.HasNuts)
            {
                return false;
            }

            return true;
        }

        public bool HasNuts
        {
            get { return _HasNuts.Value; }
            set { _HasNuts.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class Catalog : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "CATALOG";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "Products", "Products" },
                { "TopSeller", "TopSeller" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(Catalog), "CATALOG",
                (jObject, context) =>
                {
                    return new Catalog(jObject, context);
                });
        }

        public static bool operator ==(Catalog entity1, Catalog entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(Catalog entity1, Catalog entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private EntityListMapper<Test.Neon.Models.Product> _Products;
        private EntityMapper<Test.Neon.Models.Product>     _TopSeller;

        public Catalog()
            : this(new JObject())
        {
        }

        public Catalog(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Products  = new EntityListMapper<Test.Neon.Models.Product>(this, "Products", "Products", context);
            _TopSeller = new EntityMapper<Test.Neon.Models.Product>(this, "TopSeller", "TopSeller", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public virtual string EntityType
        {
            get { return "CATALOG"; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<Test.Neon.Models.Product>(ref _Products, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.Product>(ref _TopSeller, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.Catalog)obj;

            if (other == null)
            {
                return false;
            }

            if (this.EntityType != other.EntityType)
            {
                return false;
            }

            if (!NeonHelper.SequenceEqual(this.Products, other.Products))
            {
                return false;
            }

            if (this.TopSeller != other.TopSeller)
            {
                return false;
            }

            return true;
        }

        public IList<Test.Neon.Models.Product> Products
        {
            get { return _Products.Value; }
            set { _Products.Set(value); }
        }

        public Test.Neon.Models.Product TopSeller
        {
            get { return _TopSeller.Value; }
            set { _TopSeller.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class Computer : Test.Neon.Models.Product
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "product.computer";
        private const string typePathString = "product.computer:product";

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "IsLinux", "IsLinux" },
            };

        public static new EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(Computer), "product.computer",
                (jObject, context) =>
                {
                    return new Computer(jObject, context);
                });
        }

        public static bool operator ==(Computer entity1, Computer entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(Computer entity1, Computer entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<bool> _IsLinux;

        public Computer()
            : this(new JObject())
        {
        }

        public Computer(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(jObject, context: context, load: false, derivedPropertyNameMap: derivedPropertyNameMap)
        {
            _IsLinux = new SimpleMapper<bool>(this, "IsLinux", "IsLinux", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override Test.Neon.Models.ProductTypes ProductType
        {
            get { return Test.Neon.Models.ProductTypes.Computer; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            changed = base._Load(jObject, reload, setType: false);
            changed = base.MapProperty<bool>(ref _IsLinux, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            if (!base.Equals(obj))
            {
                return false;
            }

            var other = (Test.Neon.Models.Computer)obj;

            if (other == null)
            {
                return false;
            }

            if (this.IsLinux != other.IsLinux)
            {
                return false;
            }

            return true;
        }

        public bool IsLinux
        {
            get { return _IsLinux.Value; }
            set { _IsLinux.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class EnumTypedEntity1 : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "test.entity1";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "age", "Age" },
                { "name", "Name" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(EnumTypedEntity1), "test.entity1",
                (jObject, context) =>
                {
                    return new EnumTypedEntity1(jObject, context);
                });
        }

        public static bool operator ==(EnumTypedEntity1 entity1, EnumTypedEntity1 entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(EnumTypedEntity1 entity1, EnumTypedEntity1 entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<int>    _Age;
        private SimpleMapper<string> _Name;

        public EnumTypedEntity1()
            : this(new JObject())
        {
        }

        public EnumTypedEntity1(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Age  = new SimpleMapper<int>(this, "age", "Age", context);
            _Name = new SimpleMapper<string>(this, "name", "Name", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<int>(ref _Age, reload) || changed;
            changed = base.MapProperty<string>(ref _Name, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.EnumTypedEntity1)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Age != other.Age)
            {
                return false;
            }

            if (this.Name != other.Name)
            {
                return false;
            }

            return true;
        }

        public int Age
        {
            get { return _Age.Value; }
            set { _Age.Value = value; }
        }

        public string Name
        {
            get { return _Name.Value; }
            set { _Name.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class EnumTypedEntity2 : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "TestEntity2";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "age", "Age" },
                { "name", "Name" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(EnumTypedEntity2), "TestEntity2",
                (jObject, context) =>
                {
                    return new EnumTypedEntity2(jObject, context);
                });
        }

        public static bool operator ==(EnumTypedEntity2 entity1, EnumTypedEntity2 entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(EnumTypedEntity2 entity1, EnumTypedEntity2 entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<int>    _Age;
        private SimpleMapper<string> _Name;

        public EnumTypedEntity2()
            : this(new JObject())
        {
        }

        public EnumTypedEntity2(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Age  = new SimpleMapper<int>(this, "age", "Age", context);
            _Name = new SimpleMapper<string>(this, "name", "Name", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<int>(ref _Age, reload) || changed;
            changed = base.MapProperty<string>(ref _Name, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.EnumTypedEntity2)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Age != other.Age)
            {
                return false;
            }

            if (this.Name != other.Name)
            {
                return false;
            }

            return true;
        }

        public int Age
        {
            get { return _Age.Value; }
            set { _Age.Value = value; }
        }

        public string Name
        {
            get { return _Name.Value; }
            set { _Name.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class EnumTypedEntity3 : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "TestEntity3";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "age", "Age" },
                { "Enum", "Enum" },
                { "EnumArray", "EnumArray" },
                { "name", "Name" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(EnumTypedEntity3), "TestEntity3",
                (jObject, context) =>
                {
                    return new EnumTypedEntity3(jObject, context);
                });
        }

        public static bool operator ==(EnumTypedEntity3 entity1, EnumTypedEntity3 entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(EnumTypedEntity3 entity1, EnumTypedEntity3 entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<int>                              _Age;
        private SimpleMapper<Test.Neon.Models.TestEntityTypes> _Enum;
        private ListMapper<Test.Neon.Models.TestEntityTypes>   _EnumArray;
        private SimpleMapper<string>                           _Name;

        public EnumTypedEntity3()
            : this(new JObject())
        {
        }

        public EnumTypedEntity3(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Age       = new SimpleMapper<int>(this, "age", "Age", context);
            _Enum      = new SimpleMapper<Test.Neon.Models.TestEntityTypes>(this, "Enum", "Enum", context);
            _EnumArray = new ListMapper<Test.Neon.Models.TestEntityTypes>(this, "EnumArray", "EnumArray", context);
            _Name      = new SimpleMapper<string>(this, "name", "Name", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public virtual Test.Neon.Models.TestEntityTypes Type
        {
            get { return Test.Neon.Models.TestEntityTypes.TestEntity3; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<int>(ref _Age, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.TestEntityTypes>(ref _Enum, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.TestEntityTypes>(ref _EnumArray, reload) || changed;
            changed = base.MapProperty<string>(ref _Name, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.EnumTypedEntity3)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Age != other.Age)
            {
                return false;
            }

            if (this.Enum != other.Enum)
            {
                return false;
            }

            if (!NeonHelper.SequenceEqual(this.EnumArray, other.EnumArray))
            {
                return false;
            }

            if (this.Name != other.Name)
            {
                return false;
            }

            if (this.Type != other.Type)
            {
                return false;
            }

            return true;
        }

        public int Age
        {
            get { return _Age.Value; }
            set { _Age.Value = value; }
        }

        public Test.Neon.Models.TestEntityTypes Enum
        {
            get { return _Enum.Value; }
            set { _Enum.Value = value; }
        }

        public IList<Test.Neon.Models.TestEntityTypes> EnumArray
        {
            get { return _EnumArray.Value; }
            set { _EnumArray.Set(value); }
        }

        public string Name
        {
            get { return _Name.Value; }
            set { _Name.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class Gum : Test.Neon.Models.Candy
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "product.candy.gum";
        private const string typePathString = "product.candy.gum:product.candy:product";

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "Flavor", "Flavor" },
            };

        public static new EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(Gum), "product.candy.gum",
                (jObject, context) =>
                {
                    return new Gum(jObject, context);
                });
        }

        public static bool operator ==(Gum entity1, Gum entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(Gum entity1, Gum entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<string> _Flavor;

        public Gum()
            : this(new JObject())
        {
        }

        public Gum(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(jObject, context: context, load: false, derivedPropertyNameMap: derivedPropertyNameMap)
        {
            _Flavor = new SimpleMapper<string>(this, "Flavor", "Flavor", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override Test.Neon.Models.ProductTypes ProductType
        {
            get { return Test.Neon.Models.ProductTypes.Gum; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            changed = base._Load(jObject, reload, setType: false);
            changed = base.MapProperty<string>(ref _Flavor, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            if (!base.Equals(obj))
            {
                return false;
            }

            var other = (Test.Neon.Models.Gum)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Flavor != other.Flavor)
            {
                return false;
            }

            return true;
        }

        public string Flavor
        {
            get { return _Flavor.Value; }
            set { _Flavor.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class Product : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "product";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "Name", "Name" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(Product), "product",
                (jObject, context) =>
                {
                    return new Product(jObject, context);
                });
        }

        public static bool operator ==(Product entity1, Product entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(Product entity1, Product entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<string> _Name;

        public Product()
            : this(new JObject())
        {
        }

        public Product(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Name = new SimpleMapper<string>(this, "Name", "Name", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public virtual Test.Neon.Models.ProductTypes ProductType
        {
            get { return Test.Neon.Models.ProductTypes.Product; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<string>(ref _Name, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.Product)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Name != other.Name)
            {
                return false;
            }

            if (this.ProductType != other.ProductType)
            {
                return false;
            }

            return true;
        }

        public string Name
        {
            get { return _Name.Value; }
            set { _Name.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class StringTypedEntity1 : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "string.entity1";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "age", "Age" },
                { "name", "Name" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(StringTypedEntity1), "string.entity1",
                (jObject, context) =>
                {
                    return new StringTypedEntity1(jObject, context);
                });
        }

        public static bool operator ==(StringTypedEntity1 entity1, StringTypedEntity1 entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(StringTypedEntity1 entity1, StringTypedEntity1 entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<int>    _Age;
        private SimpleMapper<string> _Name;

        public StringTypedEntity1()
            : this(new JObject())
        {
        }

        public StringTypedEntity1(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Age  = new SimpleMapper<int>(this, "age", "Age", context);
            _Name = new SimpleMapper<string>(this, "name", "Name", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<int>(ref _Age, reload) || changed;
            changed = base.MapProperty<string>(ref _Name, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.StringTypedEntity1)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Age != other.Age)
            {
                return false;
            }

            if (this.Name != other.Name)
            {
                return false;
            }

            return true;
        }

        public int Age
        {
            get { return _Age.Value; }
            set { _Age.Value = value; }
        }

        public string Name
        {
            get { return _Name.Value; }
            set { _Name.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class StringTypedEntity2 : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "string.entity2";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "age", "Age" },
                { "name", "Name" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(StringTypedEntity2), "string.entity2",
                (jObject, context) =>
                {
                    return new StringTypedEntity2(jObject, context);
                });
        }

        public static bool operator ==(StringTypedEntity2 entity1, StringTypedEntity2 entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(StringTypedEntity2 entity1, StringTypedEntity2 entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<int>    _Age;
        private SimpleMapper<string> _Name;

        public StringTypedEntity2()
            : this(new JObject())
        {
        }

        public StringTypedEntity2(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Age  = new SimpleMapper<int>(this, "age", "Age", context);
            _Name = new SimpleMapper<string>(this, "name", "Name", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<int>(ref _Age, reload) || changed;
            changed = base.MapProperty<string>(ref _Name, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.StringTypedEntity2)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Age != other.Age)
            {
                return false;
            }

            if (this.Name != other.Name)
            {
                return false;
            }

            return true;
        }

        public int Age
        {
            get { return _Age.Value; }
            set { _Age.Value = value; }
        }

        public string Name
        {
            get { return _Name.Value; }
            set { _Name.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class StringTypedEntity3 : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "string.entity3";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "age", "Age" },
                { "name", "Name" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(StringTypedEntity3), "string.entity3",
                (jObject, context) =>
                {
                    return new StringTypedEntity3(jObject, context);
                });
        }

        public static bool operator ==(StringTypedEntity3 entity1, StringTypedEntity3 entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(StringTypedEntity3 entity1, StringTypedEntity3 entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private SimpleMapper<int>    _Age;
        private SimpleMapper<string> _Name;

        public StringTypedEntity3()
            : this(new JObject())
        {
        }

        public StringTypedEntity3(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Age  = new SimpleMapper<int>(this, "age", "Age", context);
            _Name = new SimpleMapper<string>(this, "name", "Name", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public virtual string Type
        {
            get { return "string.entity3"; }
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<int>(ref _Age, reload) || changed;
            changed = base.MapProperty<string>(ref _Name, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
                jObject["+t"] = typeString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.StringTypedEntity3)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Age != other.Age)
            {
                return false;
            }

            if (this.Name != other.Name)
            {
                return false;
            }

            if (this.Type != other.Type)
            {
                return false;
            }

            return true;
        }

        public int Age
        {
            get { return _Age.Value; }
            set { _Age.Value = value; }
        }

        public string Name
        {
            get { return _Name.Value; }
            set { _Name.Value = value; }
        }
    }
}

namespace Test.Neon.Models
{
    public partial class TestEntity : DynamicEntity
    {
        //-----------------------------------------------------------------
        // Static members

        private const string typeString     = "test.entity";
        private const string typePathString = typeString;

        private static Dictionary<string, string> propertyNameMap =
            new Dictionary<string, string>()
            {
                { "child", "Child" },
                { "child_link", "ChildLink" },
                { "child_list", "ChildList" },
                { "doc_link", "DocLink" },
                { "doc_list", "DocList" },
                { "guid", "Guid" },
                { "int", "Int" },
                { "link_list", "LinkList" },
                { "string", "String" },
                { "string_list", "StringList" },
            };

        public static EntityRegistration _GetRegistration()
        {
            return new EntityRegistration(typeof(TestEntity), "test.entity",
                (jObject, context) =>
                {
                    return new TestEntity(jObject, context);
                });
        }

        public static bool operator ==(TestEntity entity1, TestEntity entity2)
        {
            return object.Equals(entity1, entity2);
        }

        public static bool operator !=(TestEntity entity1, TestEntity entity2)
        {
            return !object.Equals(entity1, entity2);
        }

        //-----------------------------------------------------------------
        // Instance members

        private EntityMapper<Test.Neon.Models.TestEntity>     _Child;
        private LinkMapper<Test.Neon.Models.TestEntity>       _ChildLink;
        private EntityListMapper<Test.Neon.Models.TestEntity> _ChildList;
        private DocLinkMapper<Test.Neon.Models.TestBinder>    _DocLink;
        private DocListMapper<Test.Neon.Models.TestBinder>    _DocList;
        private SimpleMapper<Guid>                            _Guid;
        private SimpleMapper<int>                             _Int;
        private LinkListMapper<Test.Neon.Models.TestEntity>   _LinkList;
        private SimpleMapper<string>                          _String;
        private ListMapper<string>                            _StringList;

        public TestEntity()
            : this(new JObject())
        {
        }

        public TestEntity(JObject jObject, IDynamicEntityContext context = null, bool load = true, Dictionary<string, string> derivedPropertyNameMap = null)
            : base(derivedPropertyNameMap ?? propertyNameMap, context)
        {
            _Child      = new EntityMapper<Test.Neon.Models.TestEntity>(this, "child", "Child", context);
            _ChildLink  = new LinkMapper<Test.Neon.Models.TestEntity>(this, "child_link", "ChildLink", context);
            _ChildList  = new EntityListMapper<Test.Neon.Models.TestEntity>(this, "child_list", "ChildList", context);
            _DocLink    = new DocLinkMapper<Test.Neon.Models.TestBinder>(this, "doc_link", "DocLink", context);
            _DocList    = new DocListMapper<Test.Neon.Models.TestBinder>(this, "doc_list", "DocList", context);
            _Guid       = new SimpleMapper<Guid>(this, "guid", "Guid", context);
            _Int        = new SimpleMapper<int>(this, "int", "Int", context);
            _LinkList   = new LinkListMapper<Test.Neon.Models.TestEntity>(this, "link_list", "LinkList", context);
            _String     = new SimpleMapper<string>(this, "string", "String", context);
            _StringList = new ListMapper<string>(this, "string_list", "StringList", context);

            if (load)
            {
                _Load(jObject, reload: false);
            }
        }

        public override string _GetEntityType()
        {
            return typeString;
        }

        public override bool _Load(JObject jObject, bool reload = false, bool setType = true)
        {
            var changed = false;

            base._Load(jObject);

            changed = base.MapProperty<Test.Neon.Models.TestEntity>(ref _Child, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.TestEntity>(ref _ChildLink, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.TestEntity>(ref _ChildList, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.TestBinder>(ref _DocLink, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.TestBinder>(ref _DocList, reload) || changed;
            changed = base.MapProperty<Guid>(ref _Guid, reload) || changed;
            changed = base.MapProperty<int>(ref _Int, reload) || changed;
            changed = base.MapProperty<Test.Neon.Models.TestEntity>(ref _LinkList, reload) || changed;
            changed = base.MapProperty<string>(ref _String, reload) || changed;
            changed = base.MapProperty<string>(ref _StringList, reload) || changed;

            if (setType)
            {
                jObject["+tp"] = typePathString;
            }

            return changed;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (object.ReferenceEquals(this, obj))
            {
                return true;
            }

            var other = (Test.Neon.Models.TestEntity)obj;

            if (other == null)
            {
                return false;
            }

            if (this.Child != other.Child)
            {
                return false;
            }

            if (this._ChildLink.Link != other._ChildLink.Link)
            {
                return false;
            }

            if (!NeonHelper.SequenceEqual(this.ChildList, other.ChildList))
            {
                return false;
            }

            if (this._DocLink.Link != other._DocLink.Link)
            {
                return false;
            }

            if (!NeonHelper.SequenceEqual(this.DocList, other.DocList))
            {
                return false;
            }

            if (this.Guid != other.Guid)
            {
                return false;
            }

            if (this.Int != other.Int)
            {
                return false;
            }

            if (!NeonHelper.SequenceEqual(this.LinkList, other.LinkList))
            {
                return false;
            }

            if (this.String != other.String)
            {
                return false;
            }

            if (!NeonHelper.SequenceEqual(this.StringList, other.StringList))
            {
                return false;
            }

            return true;
        }

        public Test.Neon.Models.TestEntity Child
        {
            get { return _Child.Value; }
            set { _Child.Value = value; }
        }

        public Test.Neon.Models.TestEntity ChildLink
        {
            get { return _ChildLink.Value; }
            set { _ChildLink.Value = value; }
        }

        public IList<Test.Neon.Models.TestEntity> ChildList
        {
            get { return _ChildList.Value; }
            set { _ChildList.Set(value); }
        }

        public Test.Neon.Models.TestBinder DocLink
        {
            get { return _DocLink.Value; }
            set { _DocLink.Value = value; }
        }

        public IList<Test.Neon.Models.TestBinder> DocList
        {
            get { return _DocList.Value; }
            set { _DocList.Set(value); }
        }

        public Guid Guid
        {
            get { return _Guid.Value; }
            set { _Guid.Value = value; }
        }

        public int Int
        {
            get { return _Int.Value; }
            set { _Int.Value = value; }
        }

        public IList<Test.Neon.Models.TestEntity> LinkList
        {
            get { return _LinkList.Value; }
            set { _LinkList.Set(value); }
        }

        public string String
        {
            get { return _String.Value; }
            set { _String.Value = value; }
        }

        public IList<string> StringList
        {
            get { return _StringList.Value; }
            set { _StringList.Set(value); }
        }
    }
}

#endregion Entities

//-----------------------------------------------------------------------------

#region Binder Documents

namespace Test.Neon.Models
{
    public partial class TestBinder : EntityDocument<Test.Neon.Models.TestEntity>, IEntityDocument
    {
        //---------------------------------------------------------------------
        // Static members

        internal static void _Register()
        {
            EntityDatabase.Register<TestBinder>(
                (document)                       => new TestBinder(document),
                (properties, database, revision) => new TestBinder(properties, database, revision),
                new string[]
                {
                    "TestImage1",
                    "test_image2",
                });
        }

        //---------------------------------------------------------------------
        // Instance members

        private TestBinder(Document document)
            : base(document)
        {
            AttachmentEvent += OnAttachmentEvent;
        }

        private TestBinder(IDictionary<string, object> properties, EntityDatabase database, Revision revision)
            : base(properties, database, revision)
        {
            AttachmentEvent += OnAttachmentEvent;
        }

        private void OnAttachmentEvent(object sender, AttachmentEventArgs args)
        {
            switch (args.Name)
            {
                case "TestImage1":

                    if (args.Path != TestImage1)
                    {
                        TestImage1 = args.Path;

                        if (args.Notify)
                        {
                            OnPropertyChanged("TestImage1");
                        }
                    }
                    break;

                case "test_image2":

                    if (args.Path != TestImage2)
                    {
                        TestImage2 = args.Path;

                        if (args.Notify)
                        {
                            OnPropertyChanged("TestImage2");
                        }
                    }
                    break;
            }
        }

        public string TestImage1 { get; private set; }

        public void SetTestImage1(byte[] bytes, string contentType = null)
        {
            base.SetAttachment("TestImage1", bytes, contentType);
        }

        public void SetTestImage1(Stream input, string contentType = null)
        {
            base.SetAttachment("TestImage1", input, contentType);
        }

        public Attachment GetTestImage1()
        {
            return base.GetAttachment("TestImage1");
        }

        public void RemoveTestImage1()
        {
            base.RemoveAttachment("TestImage1");
        }

        public string TestImage2 { get; private set; }

        public void SetTestImage2(byte[] bytes, string contentType = null)
        {
            base.SetAttachment("test_image2", bytes, contentType);
        }

        public void SetTestImage2(Stream input, string contentType = null)
        {
            base.SetAttachment("test_image2", input, contentType);
        }

        public Attachment GetTestImage2()
        {
            return base.GetAttachment("test_image2");
        }

        public void RemoveTestImage2()
        {
            base.RemoveAttachment("test_image2");
        }
    }
}

#endregion Binder Documents

//-----------------------------------------------------------------------------

#region Included Types

namespace Test.Neon.Models
{
    public enum ProductTypes : System.Int32
    {
        Product = 0,
        Candy = 1,
        Gum = 2,
        CandyBar = 3,
        Computer = 4,
        Catalog = 5,
    }
}

namespace Test.Neon.Models
{
    public partial class TestClass
    {
        public const String TestString1 = "Hello World!";
        public const String TestString2 = null;
        public const Int32 TestInt = 666;
        public const Boolean TestBool = true;
    }
}

namespace Test.Neon.Models
{
    public enum TestEntityTypes : System.Int32
    {
        TestEntity1 = 0,
        TestEntity2 = 1,
        TestEntity3 = 2,
    }
}

#endregion Included Types

//-----------------------------------------------------------------------------

#region Registration

namespace Test.Neon.Models
{
    public static class ModelTypes
    {
        public static void Register()
        {
            // Entity registrations

            var registrations = new List<EntityRegistration>(50);

            registrations.Add(Test.Neon.Models.Candy._GetRegistration());
            registrations.Add(Test.Neon.Models.CandyBar._GetRegistration());
            registrations.Add(Test.Neon.Models.Catalog._GetRegistration());
            registrations.Add(Test.Neon.Models.Computer._GetRegistration());
            registrations.Add(Test.Neon.Models.EnumTypedEntity1._GetRegistration());
            registrations.Add(Test.Neon.Models.EnumTypedEntity2._GetRegistration());
            registrations.Add(Test.Neon.Models.EnumTypedEntity3._GetRegistration());
            registrations.Add(Test.Neon.Models.Gum._GetRegistration());
            registrations.Add(Test.Neon.Models.Product._GetRegistration());
            registrations.Add(Test.Neon.Models.StringTypedEntity1._GetRegistration());
            registrations.Add(Test.Neon.Models.StringTypedEntity2._GetRegistration());
            registrations.Add(Test.Neon.Models.StringTypedEntity3._GetRegistration());
            registrations.Add(Test.Neon.Models.TestEntity._GetRegistration());

            DynamicEntity.Register(registrations);

            // Binder (AKA derived document) registrations

            Test.Neon.Models.TestBinder._Register();
        }
    }
}

#endregion Registration

