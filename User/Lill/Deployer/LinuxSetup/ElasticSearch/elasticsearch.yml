##################### Elasticsearch Configuration Example #####################

# NOTE: Macros like $(...) will be replaced by the Deployer.

# NOTE:
#
# The Deployer replaces macros of the form $(...) with computed settings and
# environment variable values may be included using the ${...} notation.

# This file contains an overview of various configuration settings,
# targeted at operations staff. Application developers should
# consult the guide at <http://elasticsearch.org/guide>.
#
# The installation procedure is covered at
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html>.
#
# Elasticsearch comes with reasonable defaults for most settings,
# so you can try it out without bothering with configuration.
#
# Most of the time, these defaults are just fine for running a production
# cluster. If you're fine-tuning your cluster, or wondering about the
# effect of certain configuration option, please _do ask_ on the
# mailing list or IRC channel [http://elasticsearch.org/community].

# For information on supported formats and syntax for the config file, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html>

################################### Cluster ###################################

# Cluster name identifies your cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.

cluster.name: $(clusterName)

#################################### Node #####################################

# Node names are generated dynamically on startup, so you're relieved
# from configuring them manually. You can tie this node to a specific name:

node.name: ${HOSTNAME}

# Allow this node to be eligible as a master node (enabled by default):

node.master: $(isDataVM)

# Allow this node to store data (enabled by default):

node.data: $(isDataVM)

# A node can have generic attributes associated with it, which can later be used
# for customized shard allocation filtering, or allocation awareness. An attribute
# is a simple key value pair, similar to node.key: value, here is an example:

#node.rack: rack314

# By default, multiple nodes are allowed to start from the same installation location
# to disable it, set the following:

node.max_local_storage_nodes: 1

#################################### Index ####################################

# Set the number of shards (splits) of an index (5 by default):

index.number_of_shards: $(shardCount)

# Set the number of replicas (additional copies) of an index (1 by default):

index.number_of_replicas: $(replicaCount)

#################################### Paths ####################################

# Path to directory containing configuration (this file and logging.yml):

path.conf: /etc/elasticsearch/

# Path to directory where node index data will be stored.

path.data: /mnt-data

# Path to temporary files:

path.work: /mnt/temp

# Path to log files:

path.logs: /var/log/elasticsearch

# Path to where plugins are installed:

#path.plugins: 

#################################### Plugin ###################################

# If a plugin listed here is not installed for current node, the node will not start.
#
#plugin.mandatory: mapper-attachments,lang-groovy

################################### Memory ####################################

# Elasticsearch performs poorly when JVM starts swapping: you should ensure that
# it _never_ swaps.
#
# Set this property to true to lock the memory:
#
bootstrap.mlockall: true

# Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set
# to the same value, and that the machine has enough memory to allocate
# for Elasticsearch, leaving enough memory for the operating system itself.
#
# You should also make sure that the Elasticsearch process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited`.

############################## Network And HTTP ###############################

# Elasticsearch, by default, binds itself to the 0.0.0.0 address, and listens
# on port [9200-9300] for HTTP traffic and on port [9300-9400] for node-to-node
# communication. (the range means that if the port is busy, it will automatically
# try the next port).

# Set the bind address specifically (IPv4 or IPv6):

#network.bind_host: 0.0.0.0

# Set the address other nodes will use to communicate with this node. If not
# set, it is automatically derived. It must point to an actual IP address.

#network.publish_host: 0.0.0.0

# Set both 'bind_host' and 'publish_host':

network.host: 0.0.0.0

# Set a custom port for the node to node communication (9300 by default):

#transport.tcp.port: 9300

# Enable compression for all communication between nodes (disabled by default):

transport.tcp.compress: true

# Set a custom port to listen for HTTP traffic:
#
# We're going to set this to the default (9200) for data nodes and 9201 for
# router nodes so that we can easily configure NGINX to add basic security
# while redirecting traffic from the standard 9200 port.

http.port: $(elasticHttpPort)

# Set a custom allowed content length:

#http.max_content_length: 100mb

# Disable HTTP completely:

#http.enabled: false

################################### Gateway ###################################

# The gateway allows for persisting the cluster state between full cluster
# restarts. Every change to the state (such as adding an index) will be stored
# in the gateway, and when the cluster starts up for the first time,
# it will read its state from the gateway.

# There are several types of gateway implementations. For more information, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html>.

# The default gateway type is the "local" gateway (recommended):
#
#gateway.type: local

# Settings below control how and when to start the initial recovery process on
# a full cluster restart (to reuse as much local data as possible when using shared
# gateway).

# Allow recovery process after N nodes in a cluster are up:

#gateway.recover_after_nodes: 1

# Set the timeout to initiate the recovery process, once the N nodes
# from previous setting are up (accepts time value):

#gateway.recover_after_time: 5m

# Set how many nodes are expected in this cluster. Once these N nodes
# are up (and recover_after_nodes is met), begin recovery process immediately
# (without waiting for recover_after_time to expire):

#gateway.expected_nodes: 2

############################# Recovery Throttling #############################

# These settings allow to control the process of shards allocation between
# nodes during initial recovery, replica allocation, rebalancing,
# or when adding and removing nodes.

# Set the number of concurrent recoveries happening on a node:
#
# 1. During the initial recovery
#
#cluster.routing.allocation.node_initial_primaries_recoveries: 4
#
# 2. During adding/removing nodes, rebalancing, etc

#cluster.routing.allocation.node_concurrent_recoveries: 2

# Set to throttle throughput when recovering (eg. 100mb, by default 20mb):
#
#indices.recovery.max_bytes_per_sec: 20mb

# Set to limit the number of open concurrent streams when
# recovering a shard from a peer:

#indices.recovery.concurrent_streams: 5

################################## Discovery ##################################

# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Set to ensure a node sees N other master eligible nodes to be considered
# operational within the cluster. This should be set to a quorum/majority of 
# the master-eligible nodes in the cluster.

#discovery.zen.minimum_master_nodes: $(minMasterNodes)

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:

#discovery.zen.ping.timeout: $(discoveryTimeout)

# We're going to disable multicast discovery because multicast isn't allowed
# for cloud environments such as Azure.  Instead, we're going to enable UDP
# discovery to the local IP addresses of the several of the data nodes which
# will act as the discovery supernodes.
#
# Note that I'm specifically not using the Azure discovery plugin to avoid
# the complexities and security issues of including Azure subscription
# credentials in the ElasticSearch configuration on all nodes.  UDP 
# discovery to the known local IP addresses of seed nodes seems cleaner.

discovery.zen.ping.multicast.enabled: false
discovery.zen.ping.unicast.hosts: [$(discoverySeeds)]

################################## Slow Log ##################################

# Shard level query and fetch threshold logging.

#index.search.slowlog.threshold.query.warn: 10s
#index.search.slowlog.threshold.query.info: 5s
#index.search.slowlog.threshold.query.debug: 2s
#index.search.slowlog.threshold.query.trace: 500ms

#index.search.slowlog.threshold.fetch.warn: 1s
#index.search.slowlog.threshold.fetch.info: 800ms
#index.search.slowlog.threshold.fetch.debug: 500ms
#index.search.slowlog.threshold.fetch.trace: 200ms

#index.indexing.slowlog.threshold.index.warn: 10s
#index.indexing.slowlog.threshold.index.info: 5s
#index.indexing.slowlog.threshold.index.debug: 2s
#index.indexing.slowlog.threshold.index.trace: 500ms

################################## GC Logging ################################

#monitor.jvm.gc.young.warn: 1000ms
#monitor.jvm.gc.young.info: 700ms
#monitor.jvm.gc.young.debug: 400ms

#monitor.jvm.gc.old.warn: 10s
#monitor.jvm.gc.old.info: 5s
#monitor.jvm.gc.old.debug: 2s

################################## Security ################################

# Uncomment if you want to enable JSONP as a valid return transport on the
# http server. With this enabled, it may pose a security risk, so disabling
# it unless you need it is recommended (it is disabled by default).

#http.jsonp.enable: true
