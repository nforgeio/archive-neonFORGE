# -----------------------------------------------------------------------------
# Replica set configuration

mongo jeffli-wus-mdb.cloudapp.net:27000
use admin
db.runCommand( { "replSetInitiate" : { "_id" : "SHARD-A", "members" : [{ "_id" : 0, "host" : "jeffli-wus-mdb.cloudapp.net:27000", "priority" : 10 }, { "_id" : 1, "host" : "jeffli-wus-mdb.cloudapp.net:27001", "priority" : 5 }, { "_id" : 2, "host" : "jeffli-wus-mdb.cloudapp.net:27002", "priority" : 5 }] } } )

mongo jeffli-wus-mdb.cloudapp.net:27050
use admin
db.runCommand( { "replSetInitiate" : { "_id" : "SHARD-B", "members" : [{ "_id" : 0, "host" : "jeffli-wus-mdb.cloudapp.net:27050", "priority" : 10 }, { "_id" : 1, "host" : "jeffli-wus-mdb.cloudapp.net:27051", "priority" : 5 }, { "_id" : 2, "host" : "jeffli-wus-mdb.cloudapp.net:27052", "priority" : 5 }] } } )

mongo jeffli-wus-mdb.cloudapp.net:27100
use admin
db.runCommand( { "replSetInitiate" : { "_id" : "SHARD-C", "members" : [{ "_id" : 0, "host" : "jeffli-wus-mdb.cloudapp.net:27100", "priority" : 10 }, { "_id" : 1, "host" : "jeffli-wus-mdb.cloudapp.net:27101", "priority" : 5 }, { "_id" : 2, "host" : "jeffli-wus-mdb.cloudapp.net:27102", "priority" : 5 }] } } )

mongo jeffli-wus-mdb.cloudapp.net:27150
use admin
db.runCommand( { "replSetInitiate" : { "_id" : "SHARD-D", "members" : [{ "_id" : 0, "host" : "jeffli-wus-mdb.cloudapp.net:27150", "priority" : 10 }, { "_id" : 1, "host" : "jeffli-wus-mdb.cloudapp.net:27151", "priority" : 5 }, { "_id" : 2, "host" : "jeffli-wus-mdb.cloudapp.net:27152", "priority" : 5 }] } } )

mongo jeffli-wus-mdb.cloudapp.net:27200
use admin
db.runCommand( { "replSetInitiate" : { "_id" : "SHARD-E", "members" : [{ "_id" : 0, "host" : "jeffli-wus-mdb.cloudapp.net:27200", "priority" : 10 }, { "_id" : 1, "host" : "jeffli-wus-mdb.cloudapp.net:27201", "priority" : 5 }, { "_id" : 2, "host" : "jeffli-wus-mdb.cloudapp.net:27202", "priority" : 5 }] } } )

mongo jeffli-wus-mdb.cloudapp.net:27250
use admin
db.runCommand( { "replSetInitiate" : { "_id" : "SHARD-F", "members" : [{ "_id" : 0, "host" : "jeffli-wus-mdb.cloudapp.net:27250", "priority" : 10 }, { "_id" : 1, "host" : "jeffli-wus-mdb.cloudapp.net:27251", "priority" : 5 }, { "_id" : 2, "host" : "jeffli-wus-mdb.cloudapp.net:27252", "priority" : 5 }] } } )

# -----------------------------------------------------------------------------
# Shard configuration

mongo jeffli-wus-mqr.cloudapp.net:27017

use admin
db.runCommand( { "addShard" : "SHARD-A/jeffli-wus-mdb.cloudapp.net:27000" } )
db.runCommand( { "addShard" : "SHARD-B/jeffli-wus-mdb.cloudapp.net:27050" } )
db.runCommand( { "addShard" : "SHARD-C/jeffli-wus-mdb.cloudapp.net:27100" } )
db.runCommand( { "addShard" : "SHARD-D/jeffli-wus-mdb.cloudapp.net:27150" } )
db.runCommand( { "addShard" : "SHARD-E/jeffli-wus-mdb.cloudapp.net:27200" } )
db.runCommand( { "addShard" : "SHARD-F/jeffli-wus-mdb.cloudapp.net:27250" } )

# -----------------------------------------------------------------------------
# MongoDB configuration

mongo jeffli-wus-mqr.cloudapp.net
mongo csidev-weu-mqr.cloudapp.net

use admin
db.auth("iceman", "Thin.ICE")
use test
db.createCollection("collection")
use admin
sh.setBalancerState(false)
sh.waitForBalancerOff()
sh.enableSharding("test")
db.runCommand({ shardCollection : "test.collection", key: { _id : "hashed" }, numInitialChunks : 8000 })
sh.status()

use admin
db.auth("iceman", "Thin.ICE")
use test
while (true) { 

	var startCount = db.collection.count(); 
	sleep(5000); 
	var endCount = db.collection.count(); 
	print(endCount.toString() + ": " + ((endCount - startCount)/5).toString() + " docs/sec"); 
}

# -----------------------------------------------------------------------------
# TokuMX configuration

mongo jeffli-wus-mqr.cloudapp.net
mongo csidev-weu-mqr.cloudapp.net

use admin
db.auth("iceman", "Thin.ICE")
use test
db.createCollection("collection")
use admin
sh.setBalancerState(false)
sh.waitForBalancerOff()
sh.enableSharding("test")
sh.shardCollection("test.collection", { _id : "hashed" }, false, false)
sh.status()

use admin
db.auth("iceman", "Thin.ICE")
use test
while (true) { 

	var startCount = db.collection.count(); 
	sleep(5000); 
	var endCount = db.collection.count(); 
	print(endCount.toString() + ": " + ((endCount - startCount)/5).toString() + " docs/sec"); 
}

# -----------------------------------------------------------------------------
# Patching to unstable development release.

	1. Edit the [patch-mongo.sh] file to set the desired release version.

	2. Use WinSCP to upload it to the ADMIN ~/setup folder on each VM.

	3.Upgrade the GATEWAY instances first.

			sudo bash -x ~/setup/patch-mongo.sh

	   Check [/var/log/mongodb/mongos.log] to verify that the service started
	   properly.  Some builds require that the SHARD metadata schema in the config
	   servers be upgraded (verify this in a test environment first!)

	   If a metadata upgrade is required, you'll need to run the following script
	   on one of the gatway VMs to disable shard balancing and then force the upgrade.

	   Mongo Shell:

			sh.enableBalancer(false)
			sh.waitForBalancerOff()

		Linux:

			sudo bash -x ~/setup/upgrade-shards.sh

	   Stop the script when it has finished the upgrade and manually restart mongos:

			sudo start mongos

	   Re-enable shard balancing (if desired) and the proceedwith upgrading the
	   remaining gateway instances via:

			sudo bash -x ~/setup/patch-mongo.sh

	4. Then upgrade each data server by patching the secondaries first, waiting until
	   they are close caught up to the primary and then patch the primary.

			sudo bash -x ~/setup/patch-mongo.sh

Note that you may be able to reverse this using the [unpatch-mongo.sh] script.

WARNING: Sometimes this can't be reversed (e.g. 3.1.5 upgrades the shard metadata schema).

# -----------------------------------------------------------------------------
# MongoTest

mongotest insert 0 jeffli-wus-mqr.cloudapp.net 27017 0 125000000 64
mongotest read 0 jeffli-wus-mqr.cloudapp.net 27017 0 125000000 64

C:\src\msft-jeffli\Springboard\User\JEFFLI\MongoTest\bin\Debug\mongotest collate *.csv Results.csv

# -----------------------------------------------------------------------------
# Linux tips

mongostat --host localhost:27017 -u iceman -p Thin.ICE --authenticationDatabase admin
mongostat --host localhost:27017 -u iceman -p Thin.ICE --authenticationDatabase admin --discover

mongostat --host jeffli-wus-mdb.cloudapp.net:27017 -u iceman -p Thin.ICE --authenticationDatabase admin
mongostat --host jeffli-wus-mqr.cloudapp.net:27017 -u iceman -p Thin.ICE --authenticationDatabase admin --discover

mongostat --host csidev-weu-mdb.cloudapp.net:27017 -u iceman -p Thin.ICE --authenticationDatabase admin
mongostat --host csidev-weu-mqr.cloudapp.net:27017 -u iceman -p Thin.ICE --authenticationDatabase admin --discover

# Clears the disk memory cache:

echo 3 | sudo tee /proc/sys/vm/drop_caches

# http://www.cyberciti.biz/faq/linux-command-to-see-major-minor-pagefaults/

# Displays memory information (every 5 sec)

sar -B 5

# I/O Monitors

iostat -x 1
sudo iotop

# Combined stats

dstat
dstat --cpu --mem --net --disk
